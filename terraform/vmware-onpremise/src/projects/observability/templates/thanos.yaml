image:
  repository: quay.io/thanos/thanos
  tag: v0.14.0
  pullPolicy: IfNotPresent

store:
  enabled: true
  # Maximum size of items held in the index cache.

query:
  enabled: true
  # Labels to treat as a replica indicator along which data is deduplicated.
  # Still you will be able to query without deduplication using 'dedup=false' parameter.
  replicaLabels: []
  # - replica
  # - prometheus_replica
  #
  # Enable --query.auto-downsampling option for query.
  autoDownsampling: false
  # Prefix for API and UI endpoints. This allows thanos UI to be served on a sub-path.
  # This option is analogous to --web.route-prefix of Promethus.
  webRoutePrefix: ""
  # Static prefix for all HTML links and redirect
  #  URLs in the UI query web interface. Actual
  #  endpoints are still served on / or the
  #  web.route-prefix. This allows thanos UI to be
  #  served behind a reverse proxy that strips a URL
  #  sub-path.
  webExternalPrefix: ""
  # Name of HTTP request header used for dynamic prefixing of UI links and redirects.
  # This option is ignored if web.external-prefix argument is set. Security risk: enable this
  # option only if a reverse proxy in front of thanos is resetting the header. The --web.prefix-header=X-Forwarded-Prefix option
  # can be useful, for example, if Thanos UI is served via Traefik reverse proxy with PathPrefixStrip option enabled, which sends the
  # stripped prefix value in X-Forwarded-Prefix header. This allows thanos UI to be served on a sub-path
  webPrefixHeader: ""
  # https://github.com/improbable-eng/thanos/issues/1015
  storeDNSResolver: miekgdns
  # Enable DNS discovery for stores
  storeDNSDiscovery: true
  # Enable DNS discovery for sidecars (this is for the chart built-in sidecar service)
  sidecarDNSDiscovery: true
  # Enable DNS discovery for queries
  ruleDNSDiscovery: false
  # Addresses of statically configured store API servers (repeatable).
  # The scheme may be prefixed with 'dns+' or 'dnssrv+' to detect store API servers through respective DNS lookups.
  stores: []
  #  - "dnssrv+_grpc._tcp.<service>.<namespace>.svc.cluster.local"
  #
  # Path to files that contains addresses of store API servers. The path can be a glob pattern (repeatable).
  serviceDiscoveryFiles: []
  # Names of configmaps that contain addresses of store API servers, used for file service discovery.
  serviceDiscoveryFileConfigMaps: []
  # Refresh interval to re-read file SD files. It is used as a resync fallback.
  serviceDiscoveryInterval: 5m
  # Log filtering level.
  logLevel: info
  # Log format to use. Possible options: logfmt or json.
  logFormat: logfmt
  # Add extra environment variables to query
  extraEnv: []
  # - name: ENV
  #   value: value
  #
  # Add extra arguments to the query service
  extraArgs: []
  # - "--extraargs=extravalue"
  #
  # Number of replicas running from query component
  replicaCount: 1
  # Kubernetes deployment strategy object as documented in https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  strategy: {}
  # Enable HPA for query component
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 3
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 50
  # Enable podDisruptionBudget for query component
  podDisruptionBudget:
    enabled: false
      # minAvailable and maxUnavailable can't be used simultaneous. Choose one.
    minAvailable: 1
    #  maxUnavailable: 50%

  # The grpc endpoint to communicate with other components
  grpc:
    # grpc listen port number
    port: 10901
    # Service definition for query grpc service
    service:
      # Annotations to query grpc service
      annotations: {}
      # Labels to query grpc service
      labels: {}
      # Match labels for service selector
      matchLabels: {}
    # Set up ingress for the grpc service
    ingress:
      enabled: false
      # Set default backend for ingress
      defaultBackend: false
      annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      labels: {}
      path: "/"
      hosts:
        - "/"
      tls: []
      #  - secretName: chart-example-tls
      #    hosts:
      #      - chart-example.local
  serviceAccount: ""

  # The http endpoint to communicate with other components
  http:
    # http listen port number
    port: 10902
    # Service definition for query http service
    service:
      type: ClusterIP
      # Annotations to query http service
      annotations:
        #service.beta.kubernetes.io/aws-load-balancer-internal: "true"
        #service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
        #external-dns.alpha.kubernetes.io/hostname: "thanos.${INFRA_UNIT}.${ROOT_INFRA_DOMAIN}"
      # Labels to query http service
      labels: {}
      # Match labels for service selector
      matchLabels: {}
    # Set up ingress for the http service
    ingress:
      enabled: true
      # Set default backend for ingress
      defaultBackend: false
      annotations:
         kubernetes.io/ingress.class: istio
        # kubernetes.io/tls-acme: "true"
      labels: {}
      path: "/*"
      hosts:
        - "thanos.${INFRA_UNIT}.${ROOT_INFRA_DOMAIN}"
      tls:
        - secretName: wildcard-${ENV}-tls
          hosts:
            - "thanos.${INFRA_UNIT}.${ROOT_INFRA_DOMAIN}"

  certSecretName: ""
  # Extra labels for query pod template
  labels: {}
  #  cluster: example
  #
  # Extra annotations for query pod template
  annotations: {}
  #  example.com: default
  #
  # Add extra labels to query deployment
  deploymentLabels: {}
  #  extraLabel: extraLabelValue
  #
  # Add extra annotations to query deployment
  deploymentAnnotations: {}
  #  extraAnnotation: extraAnnotationValue
  #
  # Add extra selector matchLabels to query deployment
  deploymentMatchLabels: {}
  #
  # Enable metrics collecting for query service
  metrics:
    # This is the Prometheus annotation type scraping configuration
    annotations:
      enabled: false
    # Enable ServiceMonitor https://github.com/coreos/prometheus-operator
    serviceMonitor:
      enabled: false
      # Labels for prometheus-operator to find servicemonitor
      labels: {}

  # Optional securityContext
  securityContext: {}
  resources: {}
  #  limits:
  #    cpu: 2000m
  #    memory: 16Gi
  #  requests:
  #    cpu: 1000m
  #    memory: 4Gi
  #
  # Node tolerations for server scheduling to nodes with taints
  # Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  tolerations:
    - key: "monitoring-node"
      operator: "Equal"
      value: "true"
      effect: "NoSchedule"
  # - key: "key"
  #   operator: "Equal|Exists"
  #   value: "value"
  #   effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"
  #
  # Node labels for query pod assignment
  # Ref: https://kubernetes.io/docs/user-guide/node-selection/
  #
  nodeSelector: {}
  #
  # Pod affinity
  # Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#node-affinity
  affinity: {}

compact:
  enabled: true
  # Minimum age of fresh (non-compacted) blocks before they are being processed.
  # Malformed blocks older than the maximum of consistency-delay and 30m0s will be removed.
  consistencyDelay: 30m
  # How long to retain raw samples in bucket. 0d - disables this retention
  retentionResolutionRaw: 30d
  # How long to retain samples of resolution 1 (5 minutes) in bucket. 0d - disables this retention
  retentionResolution5m: 120d
  # How long to retain samples of resolution 2 (1 hour) in bucket. 0d - disables this retention
  retentionResolution1h: 1y
  # Number of goroutines to use when syncing block metadata from object storage.
  blockSyncConcurrency: 20
  # Number of goroutines to use when compacting groups.
  compactConcurrency: 1
  # Log filtering level.
  logLevel: info
  # Log format to use. Possible options: logfmt or json.
  logFormat: logfmt
  # Compact service listening http port
  http:
    port: 10902
    service:
      labels: {}
      # Match labels for service selector
      matchLabels: {}
  # Add extra environment variables to compact
  extraEnv:
  # - name: ENV
  #   value: value
  #
  # Add extra arguments to the compact service
  extraArgs:
  # - "--extraargs=extravalue"
  #
  # Kubernetes deployment strategy object as documented in https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  strategy: {}
  # Data volume for the compactor to store temporary data defaults to emptyDir
  dataVolume:
    backend: {}
    #  persistentVolumeClaim:
    #    claimName: compact-data-volume
  # Create the specified persistentVolumeClaim in case persistentVolumeClaim is
  # used for the dataVolume.backend above and needs to be created.
  persistentVolumeClaim: {}
  #  name: compact-data-volume
  #  spec:
  #    storageClassName: ""
  #    accessModes: ["ReadWriteOnce"]
  #    resources:
  #      requests:
  #        storage: 100Gi
  #    selector: {}
  #    volumeName: ""
  #    volumeMode: ""
  # Extra labels for compact pod template
  labels: {}
  #  cluster: example
  #
  # Extra annotations for compact pod template
  annotations: {}
  #  example.com: default
  #
  # Add extra labels to compact deployment
  deploymentLabels: {}
  #  extraLabel: extraLabelValue
  #
  # Add extra annotations to compact deployment
  deploymentAnnotations: {}
  #  extraAnnotation: extraAnnotationValue
  #
  # Add extra selector matchLabels to compact deployment
  deploymentMatchLabels: {}
  #
  # Enable metrics collecting for compact service
  metrics:
    # This is the Prometheus annotation type scraping configuration
    annotations:
      enabled: false
    # Enable ServiceMonitor https://github.com/coreos/prometheus-operator
    serviceMonitor:
      enabled: false
      # Labels for prometheus-operator to find servicemonitor
      labels: {}
  serviceAccount: ""

  # Optional securityContext
  securityContext: {}
  resources: {}
  #  limits:
  #    cpu: 2000m
  #    memory: 16Gi
  #  requests:
  #    cpu: 1000m
  #    memory: 4Gi
  #
  # Node tolerations for server scheduling to nodes with taints
  # Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  tolerations:
    - key: "monitoring-node"
      operator: "Equal"
      value: "true"
      effect: "NoSchedule"
  # - key: "key"
  #   operator: "Equal|Exists"
  #   value: "value"
  #   effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"
  #
  # Node labels for compact pod assignment
  # Ref: https://kubernetes.io/docs/user-guide/node-selection/
  #
  nodeSelector: {}
  #
  # Pod affinity
  # Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#node-affinity
  affinity: {}

bucket:
  enabled: true
  # Number of replicas running from bucket component
  replicaCount: 1
  # Log filtering level.
  logLevel: info
  # Log format to use. Possible options: logfmt or json.
  logFormat: logfmt
  # Refresh interval to download metadata from remote storage
  refresh: 30m
  # Timeout to download metadata from remote storage
  timeout: 5m
  # Prometheus label to use as timeline title
  label: ""
  # The http endpoint to communicate with other components
  http:
    # http listen port number
    port: 8080
    # Service definition for bucket http service
    service:
      type: ClusterIP
      # Annotations to bucket http service
      annotations: {}
      # Labels to bucket http service
      labels: {}
      # Match labels for service selector
      matchLabels: {}
    # Set up ingress for the http service
    ingress:
      enabled: false
      # Set default backend for ingress
      defaultBackend: false
      annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      labels: {}
      path: "/"
      hosts:
        - "/"
      tls: []
      #  - secretName: chart-example-tls
      #    hosts:
      #      - chart-example.local
  # Add extra environment variables to bucket
  extraEnv:
  # - name: ENV
  #   value: value
  #
  # Add extra arguments to the bucket service
  extraArgs:
  # - "--extraargs=extravalue"
  #
  # Kubernetes deployment strategy object as documented in https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  strategy: {}
  # Extra labels for bucket pod template
  labels: {}
  #  cluster: example
  #
  # Extra annotations for bucket pod template
  annotations: {}
  #  example.com: default
  #
  # Add extra labels to bucket deployment
  deploymentLabels: {}
  #  extraLabel: extraLabelValue
  #
  # Add extra annotations to bucket deployment
  deploymentAnnotations: {}
  #
  # Add extra selector matchLabels to bucket deployment
  deploymentMatchLabels: {}

  # Enable podDisruptionBudget for bucket component
  podDisruptionBudget:
    enabled: false
      # minAvailable and maxUnavailable can't be used simultaneous. Choose one.
    minAvailable: 1
    #  maxUnavailable: 50%

  # Optional securityContext
  securityContext: {}
  resources: {}
  #  limits:
  #    cpu: 2000m
  #    memory: 16Gi
  #  requests:
  #    cpu: 1000m
  #    memory: 4Gi
  #
  # Node tolerations for server scheduling to nodes with taints
  # Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  tolerations:
    - key: "monitoring-node"
      operator: "Equal"
      value: "true"
      effect: "NoSchedule"
  # - key: "key"
  #   operator: "Equal|Exists"
  #   value: "value"
  #   effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"
  #
  # Node labels for bucket pod assignment
  # Ref: https://kubernetes.io/docs/user-guide/node-selection/
  #
  nodeSelector: {}
  #
  # Pod affinity
  # Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#node-affinity
  affinity: {}
  serviceAccount: ""

rule:
  enabled: false
  # Labels to be applied to all generated metrics (repeated). Similar to external labels for
  # Prometheus, used to identify ruler and its blocks as unique source.
  ruleLabels: {}
  # Minimum amount of time to wait before resending an alert to Alertmanager.
  resendDelay: ""
  # The default evaluation interval to use.
  evalInterval: ""
  # Block duration for TSDB block.
  tsdbBlockDuration: ""
  # Block retention time on local disk.
  tsdbRetention: ""
  # Prefix for API and UI endpoints. This allows thanos UI to be served on a sub-path.
  # This option is analogous to --web.route-prefix of Promethus.
  webRoutePrefix: ""
  # Static prefix for all HTML links and redirect
  # URLs in the UI web interface. Actual
  #  endpoints are still served on / or the
  # web.route-prefix. This allows thanos UI to be
  # served behind a reverse proxy that strips a URL sub-path.
  webExternalPrefix: ""
  # Name of HTTP request header used for dynamic prefixing of UI links and redirects.
  # This option is ignored if web.external-prefix argument is set. Security risk: enable this
  # option only if a reverse proxy in front of thanos is resetting the header. The --web.prefix-header=X-Forwarded-Prefix option
  # can be useful, for example, if Thanos UI is served via Traefik reverse proxy with PathPrefixStrip option enabled, which sends the
  # stripped prefix value in X-Forwarded-Prefix header. This allows thanos UI to be served on a sub-path
  webPrefixHeader: ""
  # Enable DNS discovery for stores
  queryDNSDiscovery: true
  # Alertmanager replica URLs to push firing alerts. Ruler claims success if push to at
  # least one alertmanager from discovered succeeds. The scheme may be prefixed with
  # 'dns+' or 'dnssrv+' to detect Alertmanager IPs  through respective DNS lookups. The port
  # defaults to 9093 or the SRV record's value. The URL path is used as a prefix for the regular
  # Alertmanager API path.
  alertmanagers: []
  # Timeout for sending alerts to alertmanager
  alertmanagersSendTimeout: ""
  # The external Thanos Query URL that would be set in all alerts 'Source' field
  alertQueryUrl: ""
  # Labels by name to drop before sending to alertmanager. This allows alert to be
  # deduplicated on replica label (repeated). Similar Prometheus alert relabelling
  alertLabelDrop: []
  # Override rules file
  ruleOverrideName: ""
  # Rule files for rule
  ruleFiles:
    alerting_rules.yaml: {}
    # groups:
    #   - name: Instances
    #     rules:
    #       - alert: InstanceDown
    #         expr: up == 0
    #         for: 5m
    #         labels:
    #           severity: page
    #         annotations:
    #           description: '{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 5 minutes.'
    #           summary: 'Instance {{ $labels.instance }} down'
  # Log filtering level.
  logLevel: info
  # Log format to use. Possible options: logfmt or json.
  logFormat: logfmt
  # Add extra environment variables to rule
  extraEnv: []
  # - name: ENV
  #   value: value
  #
  # Add extra arguments to the rule service
  extraArgs: []
  # - "--extraargs=extravalue"
  #
  # Number of replicas running from rule component
  replicaCount: 1
  # Kubernetes update strategy object as documented in https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
  updateStrategy: {}
  # Enable HPA for rule component
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 3
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 50
  # Enable podDisruptionBudget for rule component
  podDisruptionBudget:
    enabled: false
    # minAvailable and maxUnavailable can't be used simultaneous. Choose one.
    minAvailable: 1
    #  maxUnavailable: 50%

  # The grpc endpoint to communicate with other components
  grpc:
    # grpc listen port number
    port: 10901
    # Service definition for rule grpc service
    service:
      # Annotations to rule grpc service
      annotations: {}
      # labels to rule grpc service
      labels: {}
      # Match labels for service selector
      matchLabels: {}
    # Set up ingress for the grpc service
    ingress:
      enabled: false
      # Set default backend for ingress
      defaultBackend: false
      annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      labels: {}
      path: "/"
      hosts:
        - "/"
      tls: []
      #  - secretName: chart-example-tls
      #    hosts:
      #      - chart-example.local
  serviceAccount: ""

  # The http endpoint to communicate with other components
  http:
    # http listen port number
    port: 10902
    # Service definition for rule http service
    service:
      type: ClusterIP
      # Annotations to rule http service
      annotations: {}
      # Labels to rule http service
      labels: {}
      # Match labels for service selector
      matchLabels: {}
    # Set up ingress for the http service
    ingress:
      enabled: false
      # Set default backend for ingress
      defaultBackend: false
      annotations: {}
        # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      labels: {}
      path: "/"
      hosts:
        - "/"
      tls: []
      #  - secretName: chart-example-tls
      #    hosts:
      #      - chart-example.local

  certSecretName: ""
  # Extra labels for rule pod template
  labels: {}
  #  cluster: example
  #
  # Extra annotations for rule pod template
  annotations: {}
  #  example.com: default
  #
  # Add extra labels to rule deployment
  statefulsetLabels: {}
  #  extraLabel: extraLabelValue
  #
  # Add extra annotations to rule deployment
  statefulsetAnnotations: {}
  #  extraAnnotation: extraAnnotationValue
  #
  #
  # Add extra selector matchLabels to rule deployment
  statefulsetMatchLabels: {}
  # Enable metrics collecting for rule service
  metrics:
    # This is the Prometheus annotation type scraping configuration
    annotations:
      enabled: false
    # Enable ServiceMonitor https://github.com/coreos/prometheus-operator
    serviceMonitor:
      enabled: false
      # Labels for prometheus-operator to find servicemonitor
      labels: {}

  # Optional securityContext
  securityContext: {}
  resources: {}
  #  limits:
  #    cpu: 2000m
  #    memory: 16Gi
  #  requests:
  #    cpu: 1000m
  #    memory: 4Gi
  #
  # Node tolerations for server scheduling to nodes with taints
  # Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  tolerations:
    - key: "monitoring-node"
      operator: "Equal"
      value: "true"
      effect: "NoSchedule"
  # - key: "key"
  #   operator: "Equal|Exists"
  #   value: "value"
  #   effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"
  #
  # Node labels for rule pod assignment
  # Ref: https://kubernetes.io/docs/user-guide/node-selection/
  #
  nodeSelector: {}
  #
  # Pod affinity
  # Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#node-affinity
  affinity: {}


sidecar:
  # NOTE: This is only the service references for the sidecar
  enabled: true
  selector:
    app: prometheus
  # Enable metrics collecting for sidecar service
  metrics:
    # Enable ServiceMonitor https://github.com/coreos/prometheus-operator
    serviceMonitor:
      enabled: false
      # Labels for prometheus-operator to find servicemonitor
      labels: {}
  # The grpc endpoint to communicate with other components
  grpc:
    # grpc listen port number
    port: 10901
    # Service definition for sidecar grpc service
    service:
      type: ClusterIP
      # The node port number to use when the service type is set as 'NodePort'
      nodePort: 31901
      # External IPs assigned to sidecar grpc service
      externalIPs: []
      # Annotations to sidecar grpc service
      annotations: {}
      # Labels to sidecar grpc service
      labels: {}
    # Set up ingress for the grpc service
    ingress:
      enabled: false
      # Set default backend for ingress
      defaultBackend: false
      annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      labels: {}
      path: "/"
      hosts:
        - "/"
      tls: []
      #  - secretName: chart-example-tls
      #    hosts:
      #      - chart-example.local

  # The http endpoint to communicate with other components
  http:
    # http listen port number
    port: 10902
    # Service definition for sidecar http service
    service:
      type: ClusterIP
      # Annotations to sidecar http service
      annotations: {}
      # Labels to sidecar http service
      labels: {}
    # Set up ingress for the http service
    ingress:
      enabled: false
      # Set default backend for ingress
      defaultBackend: false
      annotations: {}
        # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      labels: {}
      path: "/"
      hosts:
        - "/"
      tls: []
      #  - secretName: chart-example-tls
      #    hosts:
      #      - chart-example.local


# This is the general backend configuration. Please se the examples below to configurate object store.
# More information can be found at thanos github repositoriy: https://github.com/thanos-io/thanos/blob/master/docs/storage.md
# Existing secret containing the configuration. The key must be `object-store.yaml`
objstoreSecretOverride: ""
# Text representation of the configuration
objstoreFile: ""
# YAML representation of the configuration. It's mutually exclusive with objstoreFile.
objstore:
  type: S3
  config:
    bucket: "${RESOURCE}-monitoring-storage-${ENV}"
    endpoint: "s3.amazonaws.com"
    region: "${REGION}"
    access_key: "${ACCESSKEY}"
    insecure: false
    signature_version2: false
    encrypt_sse: false
    secret_key: "${ACCESSPASS}"
    put_user_metadata: {}
    http_config:
      idle_conn_timeout: 0s
      response_header_timeout: 0s
      insecure_skip_verify: false
    trace:
      enable: false
    part_size: 0
